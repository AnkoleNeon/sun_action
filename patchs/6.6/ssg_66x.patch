diff --git a/block/Kconfig.iosched b/block/Kconfig.iosched
index 27f11320b8d12..41fa49034adca 100644
--- a/block/Kconfig.iosched
+++ b/block/Kconfig.iosched
@@ -44,4 +44,18 @@ config BFQ_CGROUP_DEBUG
 	Enable some debugging help. Currently it exports additional stat
 	files in a cgroup which can be useful for debugging.
 
+config MQ_IOSCHED_SSG
+	tristate "SamSung Generic I/O scheduler"
+	default n
+	help
+	  SamSung Generic IO scheduler.
+
+config MQ_IOSCHED_SSG_CGROUP
+	tristate "Control Group for SamSung Generic I/O scheduler"
+	default n
+	depends on BLK_CGROUP
+	depends on MQ_IOSCHED_SSG
+	help
+	  Control Group for SamSung Generic IO scheduler.
+
 endmenu
diff --git a/block/Makefile b/block/Makefile
index 46ada9dc8bbfe..9ebdd1472eae4 100644
--- a/block/Makefile
+++ b/block/Makefile
@@ -25,6 +25,9 @@ obj-$(CONFIG_MQ_IOSCHED_DEADLINE)	+= mq-deadline.o
 obj-$(CONFIG_MQ_IOSCHED_KYBER)	+= kyber-iosched.o
 bfq-y				:= bfq-iosched.o bfq-wf2q.o bfq-cgroup.o
 obj-$(CONFIG_IOSCHED_BFQ)	+= bfq.o
+ssg-$(CONFIG_MQ_IOSCHED_SSG)	:= ssg-iosched.o ssg-stat.o
+ssg-$(CONFIG_MQ_IOSCHED_SSG_CGROUP)	+= ssg-cgroup.o
+obj-$(CONFIG_MQ_IOSCHED_SSG)	+= ssg.o
 
 obj-$(CONFIG_BLK_DEV_INTEGRITY) += bio-integrity.o blk-integrity.o
 obj-$(CONFIG_BLK_DEV_INTEGRITY_T10)	+= t10-pi.o
diff --git a/block/blk-mq-tag.h b/block/blk-mq-tag.h
new file mode 100644
index 0000000000000..3d4caebc6d89c
--- /dev/null
+++ b/block/blk-mq-tag.h
@@ -0,0 +1,73 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef INT_BLK_MQ_TAG_H
+#define INT_BLK_MQ_TAG_H
+
+struct blk_mq_alloc_data;
+
+extern struct blk_mq_tags *blk_mq_init_tags(unsigned int nr_tags,
+					unsigned int reserved_tags,
+					int node, int alloc_policy);
+extern void blk_mq_free_tags(struct blk_mq_tags *tags);
+extern int blk_mq_init_bitmaps(struct sbitmap_queue *bitmap_tags,
+			       struct sbitmap_queue *breserved_tags,
+			       unsigned int queue_depth,
+			       unsigned int reserved,
+			       int node, int alloc_policy);
+
+extern unsigned int blk_mq_get_tag(struct blk_mq_alloc_data *data);
+unsigned long blk_mq_get_tags(struct blk_mq_alloc_data *data, int nr_tags,
+			      unsigned int *offset);
+extern void blk_mq_put_tag(struct blk_mq_tags *tags, struct blk_mq_ctx *ctx,
+			   unsigned int tag);
+void blk_mq_put_tags(struct blk_mq_tags *tags, int *tag_array, int nr_tags);
+extern int blk_mq_tag_update_depth(struct blk_mq_hw_ctx *hctx,
+					struct blk_mq_tags **tags,
+					unsigned int depth, bool can_grow);
+extern void blk_mq_tag_resize_shared_tags(struct blk_mq_tag_set *set,
+					     unsigned int size);
+extern void blk_mq_tag_update_sched_shared_tags(struct request_queue *q);
+
+extern void blk_mq_tag_wakeup_all(struct blk_mq_tags *tags, bool);
+void blk_mq_queue_tag_busy_iter(struct request_queue *q, busy_tag_iter_fn *fn,
+		void *priv);
+void blk_mq_all_tag_iter(struct blk_mq_tags *tags, busy_tag_iter_fn *fn,
+		void *priv);
+
+// static inline struct sbq_wait_state *bt_wait_ptr(struct sbitmap_queue *bt,
+						 // struct blk_mq_hw_ctx *hctx)
+// {
+	// if (!hctx)
+		// return &bt->ws[0];
+	// return sbq_wait_ptr(bt, &hctx->wait_index);
+// }
+
+// enum {
+	// BLK_MQ_NO_TAG		= -1U,
+	// BLK_MQ_TAG_MIN		= 1,
+	// BLK_MQ_TAG_MAX		= BLK_MQ_NO_TAG - 1,
+// };
+
+// extern void __blk_mq_tag_busy(struct blk_mq_hw_ctx *);
+// extern void __blk_mq_tag_idle(struct blk_mq_hw_ctx *);
+
+// static inline void blk_mq_tag_busy(struct blk_mq_hw_ctx *hctx)
+// {
+	// if (hctx->flags & BLK_MQ_F_TAG_QUEUE_SHARED)
+		// __blk_mq_tag_busy(hctx);
+// }
+
+// static inline void blk_mq_tag_idle(struct blk_mq_hw_ctx *hctx)
+// {
+	// if (!(hctx->flags & BLK_MQ_F_TAG_QUEUE_SHARED))
+		// return;
+
+	// __blk_mq_tag_idle(hctx);
+// }
+
+// static inline bool blk_mq_tag_is_reserved(struct blk_mq_tags *tags,
+					  // unsigned int tag)
+// {
+	// return tag < tags->nr_reserved_tags;
+// }
+
+#endif
diff --git a/block/blk-sec.h b/block/blk-sec.h
new file mode 100644
index 0000000000000..26e3e432498a1
--- /dev/null
+++ b/block/blk-sec.h
@@ -0,0 +1,92 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef BLK_SEC_H
+#define BLK_SEC_H
+
+enum {
+	WB_REQ_IOSCHED = 0,
+	WB_REQ_USER,
+
+	NR_WB_REQ_TYPE
+};
+
+#if IS_ENABLED(CONFIG_BLK_SEC_COMMON)
+extern struct device *blk_sec_dev;
+extern struct workqueue_struct *blk_sec_common_wq;
+
+extern struct gendisk *blk_sec_internal_disk(void);
+#else
+static __maybe_unused struct gendisk *blk_sec_internal_disk(void)
+{
+	return NULL;
+}
+#endif
+
+#if IS_ENABLED(CONFIG_BLK_SEC_STATS)
+struct pio_node {
+	struct list_head list;
+
+	pid_t tgid;
+	char name[TASK_COMM_LEN];
+	u64 start_time;
+
+	atomic_t kb[REQ_OP_DISCARD + 1];
+
+	atomic_t ref_count;
+	struct pio_node *h_next; /* next pio_node for hash */
+};
+
+extern void blk_sec_stat_account_init(struct request_queue *q);
+extern void blk_sec_stat_account_exit(struct elevator_queue *eq);
+extern void blk_sec_stat_account_io_prepare(struct request *rq,
+		void *ptr_pio);
+extern void blk_sec_stat_account_io_complete(struct request *rq,
+		unsigned int data_size, void *pio);
+extern void blk_sec_stat_account_io_finish(struct request *rq,
+		void *ptr_pio);
+#else
+static inline void blk_sec_stat_account_init(struct request_queue *q)
+{
+}
+
+static inline void blk_sec_stat_account_exit(struct elevator_queue *eq)
+{
+}
+
+static inline void blk_sec_stat_account_io_prepare(struct request *rq,
+		void *ptr_pio)
+{
+}
+
+static inline void blk_sec_stat_account_io_complete(struct request *rq,
+		unsigned int data_size, void *pio)
+{
+}
+
+static inline void blk_sec_stat_account_io_finish(struct request *rq,
+		void *ptr_pio)
+{
+}
+#endif
+
+#if IS_ENABLED(CONFIG_BLK_SEC_WB)
+extern int blk_sec_wb_ctrl(bool enable, int req_type);
+extern int blk_sec_wb_ctrl_async(bool enable, int req_type);
+extern bool blk_sec_wb_is_supported(struct gendisk *gd);
+#else
+static inline int blk_sec_wb_ctrl(bool enable, int req_type)
+{
+	return 0;
+}
+
+static inline int blk_sec_wb_ctrl_async(bool enable, int req_type)
+{
+	return 0;
+}
+
+static inline bool blk_sec_wb_is_supported(struct gendisk *gd)
+{
+	return false;
+}
+#endif
+
+#endif // BLK_SEC_H
diff --git a/block/elevator.c b/block/elevator.c
index ba072d8f660e6..29243c690321e 100644
--- a/block/elevator.c
+++ b/block/elevator.c
@@ -575,8 +575,11 @@ static struct elevator_type *elevator_get_default(struct request_queue *q)
 	if (q->nr_hw_queues != 1 &&
 	    !blk_mq_is_shared_tags(q->tag_set->flags))
 		return NULL;
-
+#ifdef CONFIG_MQ_IOSCHED_SSG
+    return elevator_find_get(q, "ssg");
+#else
 	return elevator_find_get(q, "mq-deadline");
+#endif
 }
 
 /*
diff --git a/block/ssg-cgroup.c b/block/ssg-cgroup.c
new file mode 100644
index 0000000000000..32f7649c2ee47
--- /dev/null
+++ b/block/ssg-cgroup.c
@@ -0,0 +1,265 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ *  Control Group of SamSung Generic I/O scheduler
+ *
+ *  Copyright (C) 2021 Changheun Lee <nanich.lee@samsung.com>
+ */
+
+#include <linux/blkdev.h>
+#include <linux/blk-mq.h>
+
+#include "blk-cgroup.h"
+#include "blk-mq.h"
+#include "blk-mq-tag.h"
+#include "ssg.h"
+
+static struct blkcg_policy ssg_blkcg_policy;
+
+#define CPD_TO_SSG_BLKCG(_cpd) container_of((_cpd), struct ssg_blkcg, cpd)
+#define BLKCG_TO_SSG_BLKCG(_blkcg) \
+	CPD_TO_SSG_BLKCG(blkcg_to_cpd((_blkcg), &ssg_blkcg_policy))
+
+#define PD_TO_SSG_BLKG(_pd) container_of((_pd), struct ssg_blkg, pd)
+#define BLKG_TO_SSG_BLKG(_blkg) \
+	PD_TO_SSG_BLKG(blkg_to_pd((_blkg), &ssg_blkcg_policy))
+
+#define CSS_TO_SSG_BLKCG(css) BLKCG_TO_SSG_BLKCG(css_to_blkcg(css))
+
+static struct blkcg_policy_data *ssg_blkcg_cpd_alloc(gfp_t gfp)
+{
+	struct ssg_blkcg *ssg_blkcg;
+
+	ssg_blkcg = kzalloc(sizeof(struct ssg_blkcg), gfp);
+	if (ZERO_OR_NULL_PTR(ssg_blkcg))
+		return NULL;
+
+	return &ssg_blkcg->cpd;
+}
+
+static void ssg_blkcg_cpd_init(struct blkcg_policy_data *cpd)
+{
+	struct ssg_blkcg *ssg_blkcg = CPD_TO_SSG_BLKCG(cpd);
+
+	if (IS_ERR_OR_NULL(ssg_blkcg))
+		return;
+
+	ssg_blkcg->max_available_ratio = 25;
+}
+
+static void ssg_blkcg_cpd_free(struct blkcg_policy_data *cpd)
+{
+	struct ssg_blkcg *ssg_blkcg = CPD_TO_SSG_BLKCG(cpd);
+
+	if (IS_ERR_OR_NULL(ssg_blkcg))
+		return;
+
+	kfree(ssg_blkcg);
+}
+
+static void ssg_blkcg_set_shallow_depth(struct ssg_blkcg *ssg_blkcg,
+					struct ssg_blkg *ssg_blkg,
+					struct blk_mq_tags *tags)
+{
+	unsigned int depth = tags->bitmap_tags.sb.depth;
+	unsigned int map_nr = tags->bitmap_tags.sb.map_nr;
+
+	ssg_blkg->max_available_rqs =
+		depth * ssg_blkcg->max_available_ratio / 100U;
+	ssg_blkg->shallow_depth =
+		max_t(unsigned int, 1, ssg_blkg->max_available_rqs / map_nr);
+}
+
+static struct blkg_policy_data *
+ssg_blkcg_pd_alloc(struct gendisk *disk, struct blkcg *blkcg, gfp_t gfp)
+{
+	struct ssg_blkg *ssg_blkg;
+
+	ssg_blkg = kzalloc_node(sizeof(struct ssg_blkg), gfp, disk->node_id);
+	if (ZERO_OR_NULL_PTR(ssg_blkg))
+		return NULL;
+
+	return &ssg_blkg->pd;
+}
+
+static void ssg_blkcg_pd_init(struct blkg_policy_data *pd)
+{
+	struct ssg_blkg *ssg_blkg;
+	struct ssg_blkcg *ssg_blkcg;
+	struct blk_mq_hw_ctx *hctx;
+	unsigned long i;
+
+	ssg_blkg = PD_TO_SSG_BLKG(pd);
+	if (IS_ERR_OR_NULL(ssg_blkg))
+		return;
+
+	ssg_blkcg = BLKCG_TO_SSG_BLKCG(pd->blkg->blkcg);
+	if (IS_ERR_OR_NULL(ssg_blkcg))
+		return;
+
+	atomic_set(&ssg_blkg->current_rqs, 0);
+	queue_for_each_hw_ctx(pd->blkg->q, hctx, i)
+		ssg_blkcg_set_shallow_depth(ssg_blkcg, ssg_blkg,
+					    hctx->sched_tags);
+}
+
+static void ssg_blkcg_pd_free(struct blkg_policy_data *pd)
+{
+	struct ssg_blkg *ssg_blkg = PD_TO_SSG_BLKG(pd);
+
+	if (IS_ERR_OR_NULL(ssg_blkg))
+		return;
+
+	kfree(ssg_blkg);
+}
+
+unsigned int ssg_blkcg_shallow_depth(struct request_queue *q)
+{
+	struct blkcg_gq *blkg;
+	struct ssg_blkg *ssg_blkg;
+
+	rcu_read_lock();
+	blkg = blkg_lookup(css_to_blkcg(curr_css()), q);
+	ssg_blkg = BLKG_TO_SSG_BLKG(blkg);
+	rcu_read_unlock();
+
+	if (IS_ERR_OR_NULL(ssg_blkg))
+		return 0;
+
+	if (atomic_read(&ssg_blkg->current_rqs) < ssg_blkg->max_available_rqs)
+		return 0;
+
+	return ssg_blkg->shallow_depth;
+}
+
+void ssg_blkcg_depth_updated(struct blk_mq_hw_ctx *hctx)
+{
+	struct request_queue *q = hctx->queue;
+	struct cgroup_subsys_state *pos_css;
+	struct blkcg_gq *blkg;
+	struct ssg_blkg *ssg_blkg;
+	struct ssg_blkcg *ssg_blkcg;
+
+	rcu_read_lock();
+	blkg_for_each_descendant_pre(blkg, pos_css, q->root_blkg)
+	{
+		ssg_blkg = BLKG_TO_SSG_BLKG(blkg);
+		if (IS_ERR_OR_NULL(ssg_blkg))
+			continue;
+
+		ssg_blkcg = BLKCG_TO_SSG_BLKCG(blkg->blkcg);
+		if (IS_ERR_OR_NULL(ssg_blkcg))
+			continue;
+
+		atomic_set(&ssg_blkg->current_rqs, 0);
+		ssg_blkcg_set_shallow_depth(ssg_blkcg, ssg_blkg,
+					    hctx->sched_tags);
+	}
+	rcu_read_unlock();
+}
+
+void ssg_blkcg_inc_rq(struct blkcg_gq *blkg)
+{
+	struct ssg_blkg *ssg_blkg = BLKG_TO_SSG_BLKG(blkg);
+
+	if (IS_ERR_OR_NULL(ssg_blkg))
+		return;
+
+	atomic_inc(&ssg_blkg->current_rqs);
+}
+
+void ssg_blkcg_dec_rq(struct blkcg_gq *blkg)
+{
+	struct ssg_blkg *ssg_blkg = BLKG_TO_SSG_BLKG(blkg);
+
+	if (IS_ERR_OR_NULL(ssg_blkg))
+		return;
+
+	atomic_dec(&ssg_blkg->current_rqs);
+}
+
+static int ssg_blkcg_show_max_available_ratio(struct seq_file *sf, void *v)
+{
+	struct ssg_blkcg *ssg_blkcg = CSS_TO_SSG_BLKCG(seq_css(sf));
+
+	if (IS_ERR_OR_NULL(ssg_blkcg))
+		return -EINVAL;
+
+	seq_printf(sf, "%d\n", ssg_blkcg->max_available_ratio);
+
+	return 0;
+}
+
+static int ssg_blkcg_set_max_available_ratio(struct cgroup_subsys_state *css,
+					     struct cftype *cftype, u64 ratio)
+{
+	struct blkcg *blkcg = css_to_blkcg(css);
+	struct ssg_blkcg *ssg_blkcg = CSS_TO_SSG_BLKCG(css);
+	struct blkcg_gq *blkg;
+	struct ssg_blkg *ssg_blkg;
+	struct blk_mq_hw_ctx *hctx;
+	unsigned long i;
+
+	if (IS_ERR_OR_NULL(ssg_blkcg))
+		return -EINVAL;
+
+	if (ratio > 100)
+		return -EINVAL;
+
+	spin_lock_irq(&blkcg->lock);
+	ssg_blkcg->max_available_ratio = ratio;
+	hlist_for_each_entry(blkg, &blkcg->blkg_list, blkcg_node) {
+		ssg_blkg = BLKG_TO_SSG_BLKG(blkg);
+		if (IS_ERR_OR_NULL(ssg_blkg))
+			continue;
+
+		queue_for_each_hw_ctx(blkg->q, hctx, i)
+			ssg_blkcg_set_shallow_depth(ssg_blkcg, ssg_blkg,
+						    hctx->sched_tags);
+	}
+	spin_unlock_irq(&blkcg->lock);
+
+	return 0;
+}
+
+struct cftype ssg_blkg_files[] = {
+	{
+		.name = "ssg.max_available_ratio",
+		.flags = CFTYPE_NOT_ON_ROOT,
+		.seq_show = ssg_blkcg_show_max_available_ratio,
+		.write_u64 = ssg_blkcg_set_max_available_ratio,
+	},
+
+	{} /* terminate */
+};
+
+static struct blkcg_policy ssg_blkcg_policy = {
+	.legacy_cftypes = ssg_blkg_files,
+
+	.cpd_alloc_fn = ssg_blkcg_cpd_alloc,
+	// .cpd_init_fn = ssg_blkcg_cpd_init,
+	.cpd_free_fn = ssg_blkcg_cpd_free,
+
+	.pd_alloc_fn = ssg_blkcg_pd_alloc,
+	.pd_init_fn = ssg_blkcg_pd_init,
+	.pd_free_fn = ssg_blkcg_pd_free,
+};
+
+int ssg_blkcg_activate(struct request_queue *q)
+{
+	return blkcg_activate_policy(q->disk, &ssg_blkcg_policy);
+}
+
+void ssg_blkcg_deactivate(struct request_queue *q)
+{
+	blkcg_deactivate_policy(q->disk, &ssg_blkcg_policy);
+}
+
+int ssg_blkcg_init(void)
+{
+	return blkcg_policy_register(&ssg_blkcg_policy);
+}
+
+void ssg_blkcg_exit(void)
+{
+	blkcg_policy_unregister(&ssg_blkcg_policy);
+}
diff --git a/block/ssg-iosched.c b/block/ssg-iosched.c
new file mode 100644
index 0000000000000..edd9b98934eed
--- /dev/null
+++ b/block/ssg-iosched.c
@@ -0,0 +1,907 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ *  SamSung Generic I/O scheduler
+ *  for the blk-mq scheduling framework
+ *
+ *  Copyright (C) 2021 Jisoo Oh <jisoo2146.oh@samsung.com>
+ *  Copyright (C) 2021 Manjong Lee <mj0123.lee@samsung.com>
+ *  Copyright (C) 2021 Changheun Lee <nanich.lee@samsung.com>
+ */
+#include <linux/kernel.h>
+#include <linux/fs.h>
+#include <linux/blkdev.h>
+#include <linux/blk-mq.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+#include <linux/compiler.h>
+#include <linux/rbtree.h>
+#include <linux/sbitmap.h>
+
+#include <trace/events/block.h>
+
+#include "blk.h"
+#include "elevator.h"
+#include "blk-mq.h"
+#include "blk-mq-debugfs.h"
+#include "blk-mq-tag.h"
+#include "blk-mq-sched.h"
+#include "ssg.h"
+#include "blk-sec.h"
+
+#define MAX_ASYNC_WRITE_RQS	8
+
+static const int read_expire = HZ / 2;		/* max time before a read is submitted. */
+static const int write_expire = 5 * HZ;		/* ditto for writes, these limits are SOFT! */
+static const int max_write_starvation = 2;	/* max times reads can starve a write */
+static const int congestion_threshold = 90;	/* percentage of congestion threshold */
+static const int max_tgroup_io_ratio = 50;	/* maximum service ratio for each thread group */
+static const int max_async_write_ratio = 25;	/* maximum service ratio for async write */
+
+static inline struct rb_root *ssg_rb_root(struct ssg_data *ssg, struct request *rq)
+{
+	return &ssg->sort_list[rq_data_dir(rq)];
+}
+
+/*
+ * get the request after `rq' in sector-sorted order
+ */
+static inline struct request *ssg_latter_request(struct request *rq)
+{
+	struct rb_node *node = rb_next(&rq->rb_node);
+
+	if (node)
+		return rb_entry_rq(node);
+
+	return NULL;
+}
+
+static void ssg_add_rq_rb(struct ssg_data *ssg, struct request *rq)
+{
+	struct rb_root *root = ssg_rb_root(ssg, rq);
+
+	elv_rb_add(root, rq);
+}
+
+static inline void ssg_del_rq_rb(struct ssg_data *ssg, struct request *rq)
+{
+	const int data_dir = rq_data_dir(rq);
+
+	if (ssg->next_rq[data_dir] == rq)
+		ssg->next_rq[data_dir] = ssg_latter_request(rq);
+
+	elv_rb_del(ssg_rb_root(ssg, rq), rq);
+}
+
+static inline struct ssg_request_info *ssg_rq_info(struct ssg_data *ssg,
+		struct request *rq)
+{
+	if (unlikely(!ssg->rq_info))
+		return NULL;
+
+	if (unlikely(!rq))
+		return NULL;
+
+	if (unlikely(rq->internal_tag < 0))
+		return NULL;
+
+	if (unlikely(rq->internal_tag >= rq->q->nr_requests))
+		return NULL;
+
+	return &ssg->rq_info[rq->internal_tag];
+}
+
+/*
+ * remove rq from rbtree and fifo.
+ */
+static void ssg_remove_request(struct request_queue *q, struct request *rq)
+{
+	struct ssg_data *ssg = q->elevator->elevator_data;
+
+	list_del_init(&rq->queuelist);
+
+	/*
+	 * We might not be on the rbtree, if we are doing an insert merge
+	 */
+	if (!RB_EMPTY_NODE(&rq->rb_node))
+		ssg_del_rq_rb(ssg, rq);
+
+	elv_rqhash_del(q, rq);
+	if (q->last_merge == rq)
+		q->last_merge = NULL;
+}
+
+static void ssg_request_merged(struct request_queue *q, struct request *req,
+			      enum elv_merge type)
+{
+	struct ssg_data *ssg = q->elevator->elevator_data;
+
+	/*
+	 * if the merge was a front merge, we need to reposition request
+	 */
+	if (type == ELEVATOR_FRONT_MERGE) {
+		elv_rb_del(ssg_rb_root(ssg, req), req);
+		ssg_add_rq_rb(ssg, req);
+	}
+}
+
+static void ssg_merged_requests(struct request_queue *q, struct request *req,
+			       struct request *next)
+{
+	/*
+	 * if next expires before rq, assign its expire time to rq
+	 * and move into next position (next will be deleted) in fifo
+	 */
+	if (!list_empty(&req->queuelist) && !list_empty(&next->queuelist)) {
+		if (time_before((unsigned long)next->fifo_time,
+				(unsigned long)req->fifo_time)) {
+			list_move(&req->queuelist, &next->queuelist);
+			req->fifo_time = next->fifo_time;
+		}
+	}
+
+	/*
+	 * kill knowledge of next, this one is a goner
+	 */
+	ssg_remove_request(q, next);
+}
+
+/*
+ * move an entry to dispatch queue
+ */
+static void ssg_move_request(struct ssg_data *ssg, struct request *rq)
+{
+	const int data_dir = rq_data_dir(rq);
+
+	ssg->next_rq[READ] = NULL;
+	ssg->next_rq[WRITE] = NULL;
+	ssg->next_rq[data_dir] = ssg_latter_request(rq);
+
+	/*
+	 * take it off the sort and fifo list
+	 */
+	ssg_remove_request(rq->q, rq);
+}
+
+/*
+ * ssg_check_fifo returns 0 if there are no expired requests on the fifo,
+ * 1 otherwise. Requires !list_empty(&ssg->fifo_list[data_dir])
+ */
+static inline int ssg_check_fifo(struct ssg_data *ssg, int ddir)
+{
+	struct request *rq = rq_entry_fifo(ssg->fifo_list[ddir].next);
+
+	/*
+	 * rq is expired!
+	 */
+	if (time_after_eq(jiffies, (unsigned long)rq->fifo_time))
+		return 1;
+
+	return 0;
+}
+
+/*
+ * For the specified data direction, return the next request to
+ * dispatch using arrival ordered lists.
+ */
+static struct request *ssg_fifo_request(struct ssg_data *ssg, int data_dir)
+{
+	struct request *rq;
+	unsigned long flags;
+
+	if (WARN_ON_ONCE(data_dir != READ && data_dir != WRITE))
+		return NULL;
+
+	if (list_empty(&ssg->fifo_list[data_dir]))
+		return NULL;
+
+	rq = rq_entry_fifo(ssg->fifo_list[data_dir].next);
+	if (data_dir == READ || !blk_queue_is_zoned(rq->q))
+		return rq;
+
+	/*
+	 * Look for a write request that can be dispatched, that is one with
+	 * an unlocked target zone.
+	 */
+	spin_lock_irqsave(&ssg->zone_lock, flags);
+	list_for_each_entry(rq, &ssg->fifo_list[WRITE], queuelist) {
+		if (blk_req_can_dispatch_to_zone(rq))
+			goto out;
+	}
+	rq = NULL;
+out:
+	spin_unlock_irqrestore(&ssg->zone_lock, flags);
+
+	return rq;
+}
+
+/*
+ * For the specified data direction, return the next request to
+ * dispatch using sector position sorted lists.
+ */
+static struct request *ssg_next_request(struct ssg_data *ssg, int data_dir)
+{
+	struct request *rq;
+	unsigned long flags;
+
+	if (WARN_ON_ONCE(data_dir != READ && data_dir != WRITE))
+		return NULL;
+
+	rq = ssg->next_rq[data_dir];
+	if (!rq)
+		return NULL;
+
+	if (data_dir == READ || !blk_queue_is_zoned(rq->q))
+		return rq;
+
+	/*
+	 * Look for a write request that can be dispatched, that is one with
+	 * an unlocked target zone.
+	 */
+	spin_lock_irqsave(&ssg->zone_lock, flags);
+	while (rq) {
+		if (blk_req_can_dispatch_to_zone(rq))
+			break;
+		rq = ssg_latter_request(rq);
+	}
+	spin_unlock_irqrestore(&ssg->zone_lock, flags);
+
+	return rq;
+}
+
+/*
+ * ssg_dispatch_requests selects the best request according to
+ * read/write expire, etc
+ */
+static struct request *__ssg_dispatch_request(struct ssg_data *ssg)
+{
+	struct request *rq, *next_rq;
+	bool reads, writes;
+	int data_dir;
+
+	if (!list_empty(&ssg->dispatch)) {
+		rq = list_first_entry(&ssg->dispatch, struct request, queuelist);
+		list_del_init(&rq->queuelist);
+		goto done;
+	}
+
+	reads = !list_empty(&ssg->fifo_list[READ]);
+	writes = !list_empty(&ssg->fifo_list[WRITE]);
+
+	/*
+	 * select the appropriate data direction (read / write)
+	 */
+
+	if (reads) {
+		BUG_ON(RB_EMPTY_ROOT(&ssg->sort_list[READ]));
+
+		if (ssg_fifo_request(ssg, WRITE) &&
+		    (ssg->starved_writes++ >= ssg->max_write_starvation))
+			goto dispatch_writes;
+
+		data_dir = READ;
+
+		goto dispatch_find_request;
+	}
+
+	/*
+	 * there are either no reads or writes have been starved
+	 */
+
+	if (writes) {
+dispatch_writes:
+		BUG_ON(RB_EMPTY_ROOT(&ssg->sort_list[WRITE]));
+
+		ssg->starved_writes = 0;
+
+		data_dir = WRITE;
+
+		goto dispatch_find_request;
+	}
+
+	return NULL;
+
+dispatch_find_request:
+	/*
+	 * we are not running a batch, find best request for selected data_dir
+	 */
+	next_rq = ssg_next_request(ssg, data_dir);
+	if (ssg_check_fifo(ssg, data_dir) || !next_rq) {
+		/*
+		 * A deadline has expired, the last request was in the other
+		 * direction, or we have run out of higher-sectored requests.
+		 * Start again from the request with the earliest expiry time.
+		 */
+		rq = ssg_fifo_request(ssg, data_dir);
+	} else {
+		/*
+		 * The last req was the same dir and we have a next request in
+		 * sort order. No expired requests so continue on from here.
+		 */
+		rq = next_rq;
+	}
+
+	/*
+	 * For a zoned block device, if we only have writes queued and none of
+	 * them can be dispatched, rq will be NULL.
+	 */
+	if (!rq)
+		return NULL;
+
+	/*
+	 * rq is the selected appropriate request.
+	 */
+	ssg_move_request(ssg, rq);
+done:
+	/*
+	 * If the request needs its target zone locked, do it.
+	 */
+	blk_req_zone_write_lock(rq);
+	rq->rq_flags |= RQF_STARTED;
+	return rq;
+}
+
+/*
+ * One confusing aspect here is that we get called for a specific
+ * hardware queue, but we may return a request that is for a
+ * different hardware queue. This is because ssg-iosched has shared
+ * state for all hardware queues, in terms of sorting, FIFOs, etc.
+ */
+static struct request *ssg_dispatch_request(struct blk_mq_hw_ctx *hctx)
+{
+	struct ssg_data *ssg = hctx->queue->elevator->elevator_data;
+	struct request *rq;
+	struct ssg_request_info *rqi;
+
+	spin_lock(&ssg->lock);
+	rq = __ssg_dispatch_request(ssg);
+	spin_unlock(&ssg->lock);
+
+	rqi = ssg_rq_info(ssg, rq);
+	if (likely(rqi)) {
+		rqi->sector = blk_rq_pos(rq);
+		rqi->data_size = blk_rq_bytes(rq);
+	}
+
+	return rq;
+}
+
+static void ssg_completed_request(struct request *rq, u64 now)
+{
+	struct ssg_data *ssg = rq->q->elevator->elevator_data;
+	struct ssg_request_info *rqi;
+
+	rqi = ssg_rq_info(ssg, rq);
+	if (likely(rqi && rqi->sector == blk_rq_pos(rq))) {
+		ssg_stat_account_io_done(ssg, rq, rqi->data_size, now);
+		blk_sec_stat_account_io_complete(rq, rqi->data_size, rqi->pio);
+	}
+}
+
+static void ssg_set_shallow_depth(struct ssg_data *ssg, struct blk_mq_tags *tags)
+{
+	unsigned int depth = tags->bitmap_tags.sb.depth;
+	unsigned int map_nr = tags->bitmap_tags.sb.map_nr;
+
+	ssg->max_async_write_rqs =
+		max_t(int, depth * max_async_write_ratio / 100U, 1);
+	ssg->max_async_write_rqs =
+		min_t(int, ssg->max_async_write_rqs, MAX_ASYNC_WRITE_RQS);
+	ssg->async_write_shallow_depth =
+		max_t(unsigned int, ssg->max_async_write_rqs / map_nr, 1);
+
+	ssg->max_tgroup_rqs =
+		max_t(int, depth * max_tgroup_io_ratio / 100U, 1);
+	ssg->tgroup_shallow_depth =
+		max_t(unsigned int, ssg->max_tgroup_rqs / map_nr, 1);
+}
+
+static void ssg_depth_updated(struct blk_mq_hw_ctx *hctx)
+{
+	struct request_queue *q = hctx->queue;
+	struct ssg_data *ssg = q->elevator->elevator_data;
+	struct blk_mq_tags *tags = hctx->sched_tags;
+	unsigned int depth = tags->bitmap_tags.sb.depth;
+
+	ssg->congestion_threshold_rqs = depth * congestion_threshold / 100U;
+
+	kfree(ssg->rq_info);
+	ssg->rq_info = kmalloc_array(depth, sizeof(struct ssg_request_info),
+			GFP_KERNEL | __GFP_ZERO);
+	if (ZERO_OR_NULL_PTR(ssg->rq_info))
+		ssg->rq_info = NULL;
+
+	ssg_set_shallow_depth(ssg, tags);
+	sbitmap_queue_min_shallow_depth(&tags->bitmap_tags,
+			ssg->async_write_shallow_depth);
+
+	ssg_blkcg_depth_updated(hctx);
+	ssg_wb_depth_updated(hctx);
+}
+
+static inline bool ssg_op_is_async_write(unsigned int op)
+{
+	return (op & REQ_OP_MASK) == REQ_OP_WRITE && !op_is_sync(op);
+}
+
+static unsigned int ssg_async_write_shallow_depth(unsigned int op,
+		struct blk_mq_alloc_data *data)
+{
+	struct ssg_data *ssg = data->q->elevator->elevator_data;
+
+	if (!ssg_op_is_async_write(op))
+		return 0;
+
+	if (atomic_read(&ssg->async_write_rqs) < ssg->max_async_write_rqs)
+		return 0;
+
+	return ssg->async_write_shallow_depth;
+}
+
+static unsigned int ssg_tgroup_shallow_depth(struct blk_mq_alloc_data *data)
+{
+	struct ssg_data *ssg = data->q->elevator->elevator_data;
+	pid_t tgid = task_tgid_nr(current->group_leader);
+	int nr_requests = data->q->nr_requests;
+	int tgroup_rqs = 0;
+	int i;
+
+	if (unlikely(!ssg->rq_info))
+		return 0;
+
+	for (i = 0; i < nr_requests; i++)
+		if (tgid == ssg->rq_info[i].tgid)
+			tgroup_rqs++;
+
+	if (tgroup_rqs < ssg->max_tgroup_rqs)
+		return 0;
+
+	return ssg->tgroup_shallow_depth;
+}
+
+static void ssg_limit_depth(unsigned int op, struct blk_mq_alloc_data *data)
+{
+	struct ssg_data *ssg = data->q->elevator->elevator_data;
+	unsigned int shallow_depth = ssg_blkcg_shallow_depth(data->q);
+
+	shallow_depth = min_not_zero(shallow_depth,
+			ssg_async_write_shallow_depth(op, data));
+
+	if (atomic_read(&ssg->allocated_rqs) > ssg->congestion_threshold_rqs)
+		shallow_depth = min_not_zero(shallow_depth,
+				ssg_tgroup_shallow_depth(data));
+
+	data->shallow_depth = shallow_depth;
+}
+
+static int ssg_init_hctx(struct blk_mq_hw_ctx *hctx, unsigned int hctx_idx)
+{
+	struct ssg_data *ssg = hctx->queue->elevator->elevator_data;
+	struct blk_mq_tags *tags = hctx->sched_tags;
+
+	ssg_set_shallow_depth(ssg, tags);
+	sbitmap_queue_min_shallow_depth(&tags->bitmap_tags,
+			ssg->async_write_shallow_depth);
+
+	return 0;
+}
+
+static void ssg_exit_queue(struct elevator_queue *e)
+{
+	struct ssg_data *ssg = e->elevator_data;
+
+	ssg_blkcg_deactivate(ssg->queue);
+
+	BUG_ON(!list_empty(&ssg->fifo_list[READ]));
+	BUG_ON(!list_empty(&ssg->fifo_list[WRITE]));
+
+	ssg_stat_exit(ssg);
+	ssg_wb_exit(ssg);
+	blk_sec_stat_account_exit(e);
+	blk_stat_disable_accounting(ssg->queue);
+
+	kfree(ssg->rq_info);
+	kfree(ssg);
+}
+
+/*
+ * initialize elevator private data (ssg_data).
+ */
+static int ssg_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+	struct ssg_data *ssg;
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	ssg = kzalloc_node(sizeof(*ssg), GFP_KERNEL, q->node);
+	if (!ssg) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = ssg;
+
+	ssg->queue = q;
+	INIT_LIST_HEAD(&ssg->fifo_list[READ]);
+	INIT_LIST_HEAD(&ssg->fifo_list[WRITE]);
+	ssg->sort_list[READ] = RB_ROOT;
+	ssg->sort_list[WRITE] = RB_ROOT;
+	ssg->fifo_expire[READ] = read_expire;
+	ssg->fifo_expire[WRITE] = write_expire;
+	ssg->max_write_starvation = max_write_starvation;
+	ssg->front_merges = 1;
+
+	atomic_set(&ssg->allocated_rqs, 0);
+	atomic_set(&ssg->async_write_rqs, 0);
+	ssg->congestion_threshold_rqs =
+		q->nr_requests * congestion_threshold / 100U;
+	ssg->rq_info = kmalloc_array(q->nr_requests,
+			sizeof(struct ssg_request_info),
+			GFP_KERNEL | __GFP_ZERO);
+	if (ZERO_OR_NULL_PTR(ssg->rq_info))
+		ssg->rq_info = NULL;
+
+	spin_lock_init(&ssg->lock);
+	spin_lock_init(&ssg->zone_lock);
+	INIT_LIST_HEAD(&ssg->dispatch);
+
+	ssg_blkcg_activate(q);
+
+	q->elevator = eq;
+
+	ssg_stat_init(ssg);
+	blk_stat_enable_accounting(q);
+	blk_sec_stat_account_init(q);
+	ssg_wb_init(ssg);
+
+	return 0;
+}
+
+static int ssg_request_merge(struct request_queue *q, struct request **rq,
+			    struct bio *bio)
+{
+	struct ssg_data *ssg = q->elevator->elevator_data;
+	sector_t sector = bio_end_sector(bio);
+	struct request *__rq;
+
+	if (!ssg->front_merges)
+		return ELEVATOR_NO_MERGE;
+
+	__rq = elv_rb_find(&ssg->sort_list[bio_data_dir(bio)], sector);
+	if (__rq) {
+		BUG_ON(sector != blk_rq_pos(__rq));
+
+		if (elv_bio_merge_ok(__rq, bio)) {
+			*rq = __rq;
+			return ELEVATOR_FRONT_MERGE;
+		}
+	}
+
+	return ELEVATOR_NO_MERGE;
+}
+
+static bool ssg_bio_merge(struct request_queue *q, struct bio *bio,
+		unsigned int nr_segs)
+{
+	struct ssg_data *ssg = q->elevator->elevator_data;
+	struct request *free = NULL;
+	bool ret;
+
+	spin_lock(&ssg->lock);
+	ret = blk_mq_sched_try_merge(q, bio, nr_segs, &free);
+	spin_unlock(&ssg->lock);
+
+	if (free)
+		blk_mq_free_request(free);
+
+	return ret;
+}
+
+/*
+ * add rq to rbtree and fifo
+ */
+static void ssg_insert_request(struct blk_mq_hw_ctx *hctx, struct request *rq,
+			      blk_insert_t at_head)
+{
+	struct request_queue *q = hctx->queue;
+	struct ssg_data *ssg = q->elevator->elevator_data;
+	const int data_dir = rq_data_dir(rq);
+	LIST_HEAD(free);
+
+	/*
+	 * This may be a requeue of a write request that has locked its
+	 * target zone. If it is the case, this releases the zone lock.
+	 */
+	blk_req_zone_write_unlock(rq);
+
+	if (blk_mq_sched_try_insert_merge(q, rq, &free)) {
+		blk_mq_free_requests(&free);
+		return;
+	}
+
+	trace_block_rq_insert(rq);
+
+	if (at_head || blk_rq_is_passthrough(rq)) {
+		if (at_head)
+			list_add(&rq->queuelist, &ssg->dispatch);
+		else
+			list_add_tail(&rq->queuelist, &ssg->dispatch);
+	} else {
+		ssg_add_rq_rb(ssg, rq);
+
+		if (rq_mergeable(rq)) {
+			elv_rqhash_add(q, rq);
+			if (!q->last_merge)
+				q->last_merge = rq;
+		}
+
+		/*
+		 * set expire time and add to fifo list
+		 */
+		rq->fifo_time = jiffies + ssg->fifo_expire[data_dir];
+		list_add_tail(&rq->queuelist, &ssg->fifo_list[data_dir]);
+	}
+}
+
+static void ssg_insert_requests(struct blk_mq_hw_ctx *hctx,
+			       struct list_head *list, blk_insert_t at_head)
+{
+	struct request_queue *q = hctx->queue;
+	struct ssg_data *ssg = q->elevator->elevator_data;
+
+	spin_lock(&ssg->lock);
+	while (!list_empty(list)) {
+		struct request *rq;
+
+		rq = list_first_entry(list, struct request, queuelist);
+		list_del_init(&rq->queuelist);
+		ssg_insert_request(hctx, rq, at_head);
+	}
+	spin_unlock(&ssg->lock);
+}
+
+/*
+ * Nothing to do here. This is defined only to ensure that .finish_request
+ * method is called upon request completion.
+ */
+static void ssg_prepare_request(struct request *rq)
+{
+	struct ssg_data *ssg = rq->q->elevator->elevator_data;
+	struct ssg_request_info *rqi;
+
+	atomic_inc(&ssg->allocated_rqs);
+
+	ssg_wb_run_ctrl_work(ssg, rq);
+
+	rqi = ssg_rq_info(ssg, rq);
+	if (likely(rqi)) {
+		rqi->tgid = task_tgid_nr(current->group_leader);
+
+		rcu_read_lock();
+		rqi->blkg = blkg_lookup(css_to_blkcg(curr_css()), rq->q);
+		ssg_blkcg_inc_rq(rqi->blkg);
+		rcu_read_unlock();
+
+		blk_sec_stat_account_io_prepare(rq, &rqi->pio);
+	}
+
+	if (ssg_op_is_async_write(rq->cmd_flags))
+		atomic_inc(&ssg->async_write_rqs);
+}
+
+/*
+ * For zoned block devices, write unlock the target zone of
+ * completed write requests. Do this while holding the zone lock
+ * spinlock so that the zone is never unlocked while ssg_fifo_request()
+ * or ssg_next_request() are executing. This function is called for
+ * all requests, whether or not these requests complete successfully.
+ *
+ * For a zoned block device, __ssg_dispatch_request() may have stopped
+ * dispatching requests if all the queued requests are write requests directed
+ * at zones that are already locked due to on-going write requests. To ensure
+ * write request dispatch progress in this case, mark the queue as needing a
+ * restart to ensure that the queue is run again after completion of the
+ * request and zones being unlocked.
+ */
+static void ssg_finish_request(struct request *rq)
+{
+	struct request_queue *q = rq->q;
+	struct ssg_data *ssg = q->elevator->elevator_data;
+	struct ssg_request_info *rqi;
+
+	if (blk_queue_is_zoned(q)) {
+		unsigned long flags;
+
+		spin_lock_irqsave(&ssg->zone_lock, flags);
+		blk_req_zone_write_unlock(rq);
+		if (!list_empty(&ssg->fifo_list[WRITE]))
+			blk_mq_sched_mark_restart_hctx(rq->mq_hctx);
+		spin_unlock_irqrestore(&ssg->zone_lock, flags);
+	}
+
+	if (unlikely(!(rq->rq_flags & RQF_ELVPRIV)))
+		return;
+
+	atomic_dec(&ssg->allocated_rqs);
+
+	rqi = ssg_rq_info(ssg, rq);
+	if (likely(rqi)) {
+		rqi->tgid = 0;
+
+		ssg_blkcg_dec_rq(rqi->blkg);
+		rqi->blkg = NULL;
+
+		blk_sec_stat_account_io_finish(rq, &rqi->pio);
+	}
+
+	if (ssg_op_is_async_write(rq->cmd_flags))
+		atomic_dec(&ssg->async_write_rqs);
+}
+
+static bool ssg_has_work(struct blk_mq_hw_ctx *hctx)
+{
+	struct ssg_data *ssg = hctx->queue->elevator->elevator_data;
+
+	return !list_empty_careful(&ssg->dispatch) ||
+		!list_empty_careful(&ssg->fifo_list[0]) ||
+		!list_empty_careful(&ssg->fifo_list[1]);
+}
+
+/*
+ * sysfs parts below
+ */
+static ssize_t ssg_var_show(int var, char *page)
+{
+	return sprintf(page, "%d\n", var);
+}
+
+static void ssg_var_store(int *var, const char *page)
+{
+	long val;
+
+	if (!kstrtol(page, 10, &val))
+		*var = val;
+}
+
+#define SHOW_FUNCTION(__FUNC, __VAR, __CONV)				\
+static ssize_t __FUNC(struct elevator_queue *e, char *page)		\
+{									\
+	struct ssg_data *ssg = e->elevator_data;			\
+	int __data = __VAR;						\
+	if (__CONV)							\
+		__data = jiffies_to_msecs(__data);			\
+	return ssg_var_show(__data, (page));				\
+}
+SHOW_FUNCTION(ssg_read_expire_show, ssg->fifo_expire[READ], 1);
+SHOW_FUNCTION(ssg_write_expire_show, ssg->fifo_expire[WRITE], 1);
+SHOW_FUNCTION(ssg_max_write_starvation_show, ssg->max_write_starvation, 0);
+SHOW_FUNCTION(ssg_front_merges_show, ssg->front_merges, 0);
+SHOW_FUNCTION(ssg_max_tgroup_rqs_show, ssg->max_tgroup_rqs, 0);
+SHOW_FUNCTION(ssg_max_async_write_rqs_show, ssg->max_async_write_rqs, 0);
+SHOW_FUNCTION(ssg_tgroup_shallow_depth_show, ssg->tgroup_shallow_depth, 0);
+SHOW_FUNCTION(ssg_async_write_shallow_depth_show, ssg->async_write_shallow_depth, 0);
+#undef SHOW_FUNCTION
+
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX, __CONV)			\
+static ssize_t __FUNC(struct elevator_queue *e, const char *page, size_t count)	\
+{									\
+	struct ssg_data *ssg = e->elevator_data;			\
+	int __data;							\
+	ssg_var_store(&__data, (page));					\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		*(__PTR) = msecs_to_jiffies(__data);			\
+	else								\
+		*(__PTR) = __data;					\
+	return count;							\
+}
+STORE_FUNCTION(ssg_read_expire_store, &ssg->fifo_expire[READ], 0, INT_MAX, 1);
+STORE_FUNCTION(ssg_write_expire_store, &ssg->fifo_expire[WRITE], 0, INT_MAX, 1);
+STORE_FUNCTION(ssg_max_write_starvation_store, &ssg->max_write_starvation, INT_MIN, INT_MAX, 0);
+STORE_FUNCTION(ssg_front_merges_store, &ssg->front_merges, 0, 1, 0);
+#undef STORE_FUNCTION
+
+#define SSG_ATTR(name) \
+	__ATTR(name, 0644, ssg_##name##_show, ssg_##name##_store)
+#define SSG_ATTR_RO(name) \
+	__ATTR(name, 0444, ssg_##name##_show, NULL)
+#define SSG_STAT_ATTR_RO(name) \
+	__ATTR(name, 0444, ssg_stat_##name##_show, NULL)
+
+static struct elv_fs_entry ssg_attrs[] = {
+	SSG_ATTR(read_expire),
+	SSG_ATTR(write_expire),
+	SSG_ATTR(max_write_starvation),
+	SSG_ATTR(front_merges),
+	SSG_ATTR_RO(max_tgroup_rqs),
+	SSG_ATTR_RO(max_async_write_rqs),
+	SSG_ATTR_RO(tgroup_shallow_depth),
+	SSG_ATTR_RO(async_write_shallow_depth),
+
+	SSG_STAT_ATTR_RO(read_latency),
+	SSG_STAT_ATTR_RO(write_latency),
+	SSG_STAT_ATTR_RO(flush_latency),
+	SSG_STAT_ATTR_RO(discard_latency),
+	SSG_STAT_ATTR_RO(inflight),
+	SSG_STAT_ATTR_RO(rqs_info),
+
+#if IS_ENABLED(CONFIG_MQ_IOSCHED_SSG_WB)
+	SSG_ATTR(wb_on_rqs),
+	SSG_ATTR(wb_off_rqs),
+	SSG_ATTR(wb_on_dirty_bytes),
+	SSG_ATTR(wb_off_dirty_bytes),
+	SSG_ATTR(wb_on_sync_write_bytes),
+	SSG_ATTR(wb_off_sync_write_bytes),
+	SSG_ATTR(wb_on_dirty_busy_written_bytes),
+	SSG_ATTR(wb_on_dirty_busy_msecs),
+	SSG_ATTR(wb_off_delay_msecs),
+	SSG_ATTR_RO(wb_triggered),
+#endif
+
+	__ATTR_NULL
+};
+
+static struct elevator_type ssg_iosched = {
+	.ops = {
+		.insert_requests = ssg_insert_requests,
+		.dispatch_request = ssg_dispatch_request,
+		.completed_request = ssg_completed_request,
+		.prepare_request = ssg_prepare_request,
+		.finish_request = ssg_finish_request,
+		.next_request = elv_rb_latter_request,
+		.former_request = elv_rb_former_request,
+		.bio_merge = ssg_bio_merge,
+		.request_merge = ssg_request_merge,
+		.requests_merged = ssg_merged_requests,
+		.request_merged = ssg_request_merged,
+		.has_work = ssg_has_work,
+		.limit_depth = ssg_limit_depth,
+		.depth_updated = ssg_depth_updated,
+		.init_hctx = ssg_init_hctx,
+		.init_sched = ssg_init_queue,
+		.exit_sched = ssg_exit_queue,
+	},
+
+	.elevator_attrs = ssg_attrs,
+	.elevator_name = "ssg",
+	.elevator_alias = "ssg",
+	.elevator_features = ELEVATOR_F_ZBD_SEQ_WRITE,
+	.elevator_owner = THIS_MODULE,
+};
+MODULE_ALIAS("ssg");
+
+static int __init ssg_iosched_init(void)
+{
+	int ret;
+
+	ret = elv_register(&ssg_iosched);
+	if (ret)
+		return ret;
+
+	ret = ssg_blkcg_init();
+	if (ret) {
+		elv_unregister(&ssg_iosched);
+		return ret;
+	}
+
+	return ret;
+}
+
+static void __exit ssg_iosched_exit(void)
+{
+	ssg_blkcg_exit();
+	elv_unregister(&ssg_iosched);
+}
+
+module_init(ssg_iosched_init);
+module_exit(ssg_iosched_exit);
+
+MODULE_AUTHOR("Jisoo Oh");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("SSG IO Scheduler");
diff --git a/block/ssg-stat.c b/block/ssg-stat.c
new file mode 100644
index 0000000000000..366d2535f2d09
--- /dev/null
+++ b/block/ssg-stat.c
@@ -0,0 +1,299 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ *  Statistics of SamSung Generic I/O scheduler
+ *
+ *  Copyright (C) 2021 Changheun Lee <nanich.lee@samsung.com>
+ */
+
+#include <linux/blkdev.h>
+#include <linux/blk-mq.h>
+#include <linux/sbitmap.h>
+
+#include "elevator.h"
+#include "blk-mq.h"
+#include "blk-mq-tag.h"
+#include "ssg.h"
+
+#define IO_TYPES (REQ_OP_DISCARD + 1)
+
+static unsigned int byte_table[] = {
+	4096, // 4KB
+	32768, // 32KB
+	65536, // 64KB
+	131072, // 128KB
+	524288, // 512KB
+	1048576, // 1MB
+
+	UINT_MAX // should be last in this array
+};
+#define BYTE_TABLE_SIZE	(sizeof(byte_table)/sizeof(unsigned int))
+
+static u64 nsec_table[] = {
+	500000, // 0.5ms
+	1000000, // 1ms
+	2000000, // 2ms
+	3000000, // 3ms
+	4000000, // 4ms
+	5000000, // 5ms
+	10000000, // 10ms
+	20000000, // 20ms
+
+	ULLONG_MAX // should be last in this array
+};
+#define NSEC_TABLE_SIZE	(sizeof(nsec_table)/sizeof(u64))
+
+struct ssg_stats {
+	u64 io_latency_cnt[IO_TYPES][BYTE_TABLE_SIZE][NSEC_TABLE_SIZE];
+};
+
+struct ssg_bt_tags_iter_data {
+	struct blk_mq_tags *tags;
+	void *data;
+	bool reserved;
+};
+
+typedef bool (ssg_tag_iter_fn)(struct sbitmap *, unsigned int, void *);
+
+static unsigned int byte_to_index(unsigned int byte)
+{
+	unsigned int idx;
+
+	for (idx = 0; idx < BYTE_TABLE_SIZE; idx++)
+		if (byte <= byte_table[idx])
+			return idx;
+
+	return BYTE_TABLE_SIZE - 1;
+}
+
+static unsigned int nsec_to_index(u64 nsec)
+{
+	unsigned int idx;
+
+	for (idx = 0; idx < NSEC_TABLE_SIZE; idx++)
+		if (nsec <= nsec_table[idx])
+			return idx;
+
+	return NSEC_TABLE_SIZE - 1;
+}
+
+static void update_io_latency(struct ssg_data *ssg, struct request *rq,
+		unsigned int data_size, u64 now)
+{
+	struct ssg_stats *stats;
+	int type = req_op(rq);
+	int byte_idx, ns_idx;
+
+	if (type > REQ_OP_DISCARD)
+		return;
+
+	if (rq->io_start_time_ns > now)
+		return;
+
+	byte_idx = byte_to_index(data_size);
+	ns_idx = nsec_to_index(now - rq->io_start_time_ns);
+
+	stats = get_cpu_ptr(ssg->stats);
+	stats->io_latency_cnt[type][byte_idx][ns_idx]++;
+	put_cpu_ptr(stats);
+}
+
+void ssg_stat_account_io_done(struct ssg_data *ssg, struct request *rq,
+		unsigned int data_size, u64 now)
+{
+	if (unlikely(!ssg->stats))
+		return;
+
+	update_io_latency(ssg, rq, data_size, now);
+}
+
+static int print_io_latency(struct ssg_stats __percpu *stats, int io_type,
+		char *buf, int buf_size)
+{
+	u64 sum[BYTE_TABLE_SIZE][NSEC_TABLE_SIZE] = { 0, };
+	int cpu;
+	int len = 0;
+	int byte_idx, ns_idx;
+
+	for_each_possible_cpu(cpu) {
+		struct ssg_stats *s = per_cpu_ptr(stats, cpu);
+
+		for (byte_idx = 0; byte_idx < BYTE_TABLE_SIZE; byte_idx++)
+			for (ns_idx = 0; ns_idx < NSEC_TABLE_SIZE; ns_idx++)
+				sum[byte_idx][ns_idx] +=
+					s->io_latency_cnt[io_type][byte_idx][ns_idx];
+	}
+
+	for (byte_idx = 0; byte_idx < BYTE_TABLE_SIZE; byte_idx++) {
+		len += snprintf(buf + len, buf_size - len, "%u:",
+				byte_table[byte_idx] / 1024);
+		for (ns_idx = 0; ns_idx < NSEC_TABLE_SIZE; ns_idx++)
+			len += snprintf(buf + len, buf_size - len, " %llu",
+					sum[byte_idx][ns_idx]);
+		len += snprintf(buf + len, buf_size - len, "\n");
+	}
+
+	return len;
+}
+
+#define IO_LATENCY_SHOW_FUNC(__FUNC, __IO_TYPE)		\
+ssize_t __FUNC(struct elevator_queue *e, char *page)	\
+{							\
+	struct ssg_data *ssg = e->elevator_data;	\
+	if (unlikely(!ssg->stats))			\
+		return 0;				\
+	return print_io_latency(ssg->stats,		\
+			__IO_TYPE, page, PAGE_SIZE);	\
+}
+IO_LATENCY_SHOW_FUNC(ssg_stat_read_latency_show, REQ_OP_READ);
+IO_LATENCY_SHOW_FUNC(ssg_stat_write_latency_show, REQ_OP_WRITE);
+IO_LATENCY_SHOW_FUNC(ssg_stat_flush_latency_show, REQ_OP_FLUSH);
+IO_LATENCY_SHOW_FUNC(ssg_stat_discard_latency_show, REQ_OP_DISCARD);
+
+static void ssg_all_tag_iter(struct blk_mq_tags *tags, ssg_tag_iter_fn *fn, struct ssg_bt_tags_iter_data *iter_data)
+{
+	iter_data->tags = tags;
+
+	if (tags->nr_reserved_tags) {
+		iter_data->reserved = true;
+		sbitmap_for_each_set(&tags->breserved_tags.sb, fn, iter_data);
+	}
+
+	iter_data->reserved = false;
+	sbitmap_for_each_set(&tags->bitmap_tags.sb, fn, iter_data);
+}
+
+static bool ssg_count_inflight(struct sbitmap *bitmap, unsigned int bitnr, void *data)
+{
+	struct ssg_bt_tags_iter_data *iter_data = data;
+	struct blk_mq_tags *tags = iter_data->tags;
+	unsigned int *inflight = iter_data->data;
+	bool reserved = iter_data->reserved;
+	struct request *rq;
+
+	if (!reserved)
+		bitnr += tags->nr_reserved_tags;
+
+	rq = tags->static_rqs[bitnr];
+
+	if (!rq)
+		return true;
+
+	if (req_op(rq) < IO_TYPES)
+		inflight[req_op(rq)]++;
+
+	return true;
+}
+
+static void get_ssg_inflight(struct request_queue *q, unsigned int *inflight)
+{
+	struct blk_mq_hw_ctx *hctx;
+	unsigned long i;
+	struct ssg_bt_tags_iter_data iter_data = {
+		.data = inflight,
+	};
+
+	if (blk_mq_is_shared_tags(q->tag_set->flags)) {
+		ssg_all_tag_iter(q->sched_shared_tags, ssg_count_inflight, &iter_data);
+	} else {
+		queue_for_each_hw_ctx(q, hctx, i) {
+			/*
+			 * If no software queues are currently mapped to this
+			 * hardware queue, there's nothing to check
+			 */
+			if (!blk_mq_hw_queue_mapped(hctx))
+				continue;
+
+			ssg_all_tag_iter(hctx->sched_tags, ssg_count_inflight, &iter_data);
+		}
+	}
+}
+
+ssize_t ssg_stat_inflight_show(struct elevator_queue *e, char *page)
+{
+	struct ssg_data *ssg = e->elevator_data;
+	unsigned int inflight[IO_TYPES] = {0, };
+
+	if (unlikely(!ssg->stats))
+		return 0;
+
+	get_ssg_inflight(ssg->queue, inflight);
+
+	return snprintf(page, PAGE_SIZE, "%u %u %u\n", inflight[REQ_OP_READ],
+			inflight[REQ_OP_WRITE], inflight[REQ_OP_DISCARD]);
+}
+
+static bool print_ssg_rq_info(struct sbitmap *bitmap, unsigned int bitnr, void *data)
+{
+	struct ssg_bt_tags_iter_data *iter_data = data;
+	struct blk_mq_tags *tags = iter_data->tags;
+	bool reserved = iter_data->reserved;
+	char *page =  iter_data->data;
+	struct request *rq;
+	int len = strlen(page);
+
+	if (!reserved)
+		bitnr += tags->nr_reserved_tags;
+
+	rq = tags->static_rqs[bitnr];
+
+	if (!rq)
+		return true;
+
+	scnprintf(page + len, PAGE_SIZE - len, "%d %d %x %x %llu %u %llu %d\n",
+					rq->tag, rq->internal_tag, req_op(rq), rq->rq_flags,
+					blk_rq_pos(rq), blk_rq_bytes(rq), rq->start_time_ns, rq->state);
+
+	return true;
+}
+
+static void print_ssg_rqs(struct request_queue *q, char *page)
+{
+	struct blk_mq_hw_ctx *hctx;
+	unsigned long i;
+	struct ssg_bt_tags_iter_data iter_data = {
+		.data = page,
+	};
+
+	if (blk_mq_is_shared_tags(q->tag_set->flags)) {
+		ssg_all_tag_iter(q->sched_shared_tags, print_ssg_rq_info, &iter_data);
+	} else {
+		queue_for_each_hw_ctx(q, hctx, i) {
+			/*
+			 * If no software queues are currently mapped to this
+			 * hardware queue, there's nothing to check
+			 */
+			if (!blk_mq_hw_queue_mapped(hctx))
+				continue;
+
+			ssg_all_tag_iter(hctx->sched_tags, print_ssg_rq_info, &iter_data);
+		}
+	}
+}
+
+ssize_t ssg_stat_rqs_info_show(struct elevator_queue *e, char *page)
+{
+	struct ssg_data *ssg = e->elevator_data;
+
+	if (unlikely(!ssg->stats))
+		return 0;
+
+	print_ssg_rqs(ssg->queue, page);
+
+	return strlen(page);
+}
+
+int ssg_stat_init(struct ssg_data *ssg)
+{
+	ssg->stats = alloc_percpu_gfp(struct ssg_stats,
+			GFP_KERNEL | __GFP_ZERO);
+	if (!ssg->stats)
+		return -ENOMEM;
+
+	return 0;
+}
+
+void ssg_stat_exit(struct ssg_data *ssg)
+{
+	if (ssg->stats)
+		free_percpu(ssg->stats);
+}
diff --git a/block/ssg.h b/block/ssg.h
new file mode 100644
index 0000000000000..435180b6a619e
--- /dev/null
+++ b/block/ssg.h
@@ -0,0 +1,191 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef SSG_H
+#define SSG_H
+
+#include "blk-cgroup.h"
+
+struct ssg_request_info {
+	pid_t tgid;
+
+	sector_t sector;
+	unsigned int data_size;
+
+	struct blkcg_gq *blkg;
+
+	void *pio;
+};
+
+struct ssg_data {
+	struct request_queue *queue;
+
+	/*
+	 * requests are present on both sort_list and fifo_list
+	 */
+	struct rb_root sort_list[2];
+	struct list_head fifo_list[2];
+
+	/*
+	 * next in sort order. read, write or both are NULL
+	 */
+	struct request *next_rq[2];
+	unsigned int starved_writes;	/* times reads have starved writes */
+
+	/*
+	 * settings that change how the i/o scheduler behaves
+	 */
+	int fifo_expire[2];
+	int max_write_starvation;
+	int front_merges;
+
+	/*
+	 * to control request allocation
+	 */
+	atomic_t allocated_rqs;
+	atomic_t async_write_rqs;
+	int congestion_threshold_rqs;
+	int max_tgroup_rqs;
+	int max_async_write_rqs;
+	unsigned int tgroup_shallow_depth;	/* thread group shallow depth for each tag map */
+	unsigned int async_write_shallow_depth;	/* async write shallow depth for each tag map */
+
+	/*
+	 * I/O context information for each request
+	 */
+	struct ssg_request_info *rq_info;
+
+	/*
+	 * Statistics
+	 */
+	void __percpu *stats;
+
+	spinlock_t lock;
+	spinlock_t zone_lock;
+	struct list_head dispatch;
+
+	/*
+	 * Write booster
+	 */
+	void *wb_data;
+};
+
+static inline struct cgroup_subsys_state *curr_css(void)
+{
+	return task_css(current, io_cgrp_id);
+}
+
+/* ssg-stat.c */
+extern int ssg_stat_init(struct ssg_data *ssg);
+extern void ssg_stat_exit(struct ssg_data *ssg);
+extern void ssg_stat_account_io_done(struct ssg_data *ssg,
+		struct request *rq, unsigned int data_size, u64 now);
+extern ssize_t ssg_stat_read_latency_show(struct elevator_queue *e, char *page);
+extern ssize_t ssg_stat_write_latency_show(struct elevator_queue *e, char *page);
+extern ssize_t ssg_stat_flush_latency_show(struct elevator_queue *e, char *page);
+extern ssize_t ssg_stat_discard_latency_show(struct elevator_queue *e, char *page);
+extern ssize_t ssg_stat_inflight_show(struct elevator_queue *e, char *page);
+extern ssize_t ssg_stat_rqs_info_show(struct elevator_queue *e, char *page);
+
+/* ssg-cgroup.c */
+#if IS_ENABLED(CONFIG_MQ_IOSCHED_SSG_CGROUP)
+struct ssg_blkcg {
+	struct blkcg_policy_data cpd; /* must be the first member */
+
+	int max_available_ratio;
+};
+
+struct ssg_blkg {
+	struct blkg_policy_data pd; /* must be the first member */
+
+	atomic_t current_rqs;
+	int max_available_rqs;
+	unsigned int shallow_depth; /* shallow depth for each tag map to get sched tag */
+};
+
+extern int ssg_blkcg_init(void);
+extern void ssg_blkcg_exit(void);
+extern int ssg_blkcg_activate(struct request_queue *q);
+extern void ssg_blkcg_deactivate(struct request_queue *q);
+extern unsigned int ssg_blkcg_shallow_depth(struct request_queue *q);
+extern void ssg_blkcg_depth_updated(struct blk_mq_hw_ctx *hctx);
+extern void ssg_blkcg_inc_rq(struct blkcg_gq *blkg);
+extern void ssg_blkcg_dec_rq(struct blkcg_gq *blkg);
+#else
+static inline int ssg_blkcg_init(void)
+{
+	return 0;
+}
+
+static inline void ssg_blkcg_exit(void)
+{
+}
+
+static inline int ssg_blkcg_activate(struct request_queue *q)
+{
+	return 0;
+}
+
+static inline void ssg_blkcg_deactivate(struct request_queue *q)
+{
+}
+
+static inline unsigned int ssg_blkcg_shallow_depth(struct request_queue *q)
+{
+	return 0;
+}
+
+static inline void ssg_blkcg_depth_updated(struct blk_mq_hw_ctx *hctx)
+{
+}
+
+static inline void ssg_blkcg_inc_rq(struct blkcg_gq *blkg)
+{
+}
+
+static inline void ssg_blkcg_dec_rq(struct blkcg_gq *blkg)
+{
+}
+#endif
+
+/* ssg-wb.c */
+#if IS_ENABLED(CONFIG_MQ_IOSCHED_SSG_WB)
+extern void ssg_wb_run_ctrl_work(struct ssg_data *ssg, struct request *rq);
+extern void ssg_wb_depth_updated(struct blk_mq_hw_ctx *hctx);
+extern void ssg_wb_init(struct ssg_data *ssg);
+extern void ssg_wb_exit(struct ssg_data *ssg);
+extern ssize_t ssg_wb_on_rqs_show(struct elevator_queue *e, char *page);
+extern ssize_t ssg_wb_on_rqs_store(struct elevator_queue *e, const char *page, size_t count);
+extern ssize_t ssg_wb_off_rqs_show(struct elevator_queue *e, char *page);
+extern ssize_t ssg_wb_off_rqs_store(struct elevator_queue *e, const char *page, size_t count);
+extern ssize_t ssg_wb_on_dirty_bytes_show(struct elevator_queue *e, char *page);
+extern ssize_t ssg_wb_on_dirty_bytes_store(struct elevator_queue *e, const char *page, size_t count);
+extern ssize_t ssg_wb_off_dirty_bytes_show(struct elevator_queue *e, char *page);
+extern ssize_t ssg_wb_off_dirty_bytes_store(struct elevator_queue *e, const char *page, size_t count);
+extern ssize_t ssg_wb_on_sync_write_bytes_show(struct elevator_queue *e, char *page);
+extern ssize_t ssg_wb_on_sync_write_bytes_store(struct elevator_queue *e, const char *page, size_t count);
+extern ssize_t ssg_wb_off_sync_write_bytes_show(struct elevator_queue *e, char *page);
+extern ssize_t ssg_wb_off_sync_write_bytes_store(struct elevator_queue *e, const char *page, size_t count);
+extern ssize_t ssg_wb_on_dirty_busy_written_bytes_show(struct elevator_queue *e, char *page);
+extern ssize_t ssg_wb_on_dirty_busy_written_bytes_store(struct elevator_queue *e, const char *page, size_t count);
+extern ssize_t ssg_wb_on_dirty_busy_msecs_show(struct elevator_queue *e, char *page);
+extern ssize_t ssg_wb_on_dirty_busy_msecs_store(struct elevator_queue *e, const char *page, size_t count);
+extern ssize_t ssg_wb_off_delay_msecs_show(struct elevator_queue *e, char *page);
+extern ssize_t ssg_wb_off_delay_msecs_store(struct elevator_queue *e, const char *page, size_t count);
+extern ssize_t ssg_wb_triggered_show(struct elevator_queue *e, char *page);
+#else
+static inline void ssg_wb_run_ctrl_work(struct ssg_data *ssg, struct request *rq)
+{
+}
+
+static inline void ssg_wb_depth_updated(struct blk_mq_hw_ctx *hctx)
+{
+}
+
+static inline void ssg_wb_init(struct ssg_data *ssg)
+{
+}
+
+static inline void ssg_wb_exit(struct ssg_data *ssg)
+{
+}
+#endif
+#endif // SSG_H
diff --git a/include/linux/blk-mq.h b/include/linux/blk-mq.h
index 523c039d32821..fa47dba5c4628 100644
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@ -28,6 +28,11 @@ typedef enum rq_end_io_ret (rq_end_io_fn)(struct request *, blk_status_t);
  * request flags */
 typedef __u32 __bitwise req_flags_t;
 
+#define RQF_RESV			((__force req_flags_t)(1 << 23))
+#define RQF_ELV			((__force req_flags_t)(1 << 22))
+#define RQF_MQ_POLL_SLEPT	((__force req_flags_t)(1 << 20))
+#define RQF_ELVPRIV		((__force req_flags_t)(1 << 12))
+#define RQF_SOFTBARRIER		((__force req_flags_t)(1 << 3))
 /* drive already may have started this one */
 #define RQF_STARTED		((__force req_flags_t)(1 << 1))
 /* request for flush sequence */
